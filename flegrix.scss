$flegrix-grid-default: (
  columns: 12, // column-count → default: 12
  gutter: 3%, // gutter between columns → default: 3%
  debug: false, // debug-mode → default: false
  debug-display: 'flex', // shows in debug-mode with displa flex|grid → default: flex
  debug-container-column-background: true, // draw column in debug-mode → default: true
  debug-container-column-midline: false, // draw column-midline in debug-mode → default: false
  debug-container-gutter-midline: false, // draw gutter-midline in debug-mode → default: false
);

$flegrix-grid-settings: $flegrix-grid-default;

@if(variable-exists(flegrix-grid)) {
  $flegrix-grid-settings: map-merge($flegrix-grid-default, $flegrix-grid);
}

@mixin felxbox() {
  @if(map-get($flegrix-grid-settings, debug)) {
    @if(map-get($flegrix-grid-settings, debug-display) == 'flex') {
      @content;
    }
  } @else {
    @supports not (display: grid) {
      @content;
    }
  }
}
@mixin grid() {

  @if(map-get($flegrix-grid-settings, debug)) {
    @if(map-get($flegrix-grid-settings, debug-display) != 'flex') {
      @content;
    }
  } @else {
    @supports (display: grid) {
      @content;
    }
  }
}


@mixin container($count: null) {

  $columncount: map-get($flegrix-grid-settings, columns);
  $gutter: map-get($flegrix-grid-settings, gutter);

  @if ($count) {
    $gutter: $gutter * $columncount / $count;
    $columncount: $count;
  }

  @include grid() {
    display: grid;
    grid-template-columns: repeat($columncount, 1fr);
    grid-column-gap: $gutter;
  }

  @include felxbox() {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
  }

  @if(map-get($flegrix-grid-settings, debug)) {
    background-image: url("data:image/svg+xml;charset=utf8,#{flegrix-url-encode(flegrix-background-svg($columncount))}");
    background-size: 100% 100%;
    background-position: center 0;
    background-repeat: repeat-y;
  }
}

// flegrix-parse(1)
// flegrix-parse(1 of 4)
@function flegrix-parse($shorthand) {

  $col: $shorthand;
  $context: map-get($flegrix-grid-settings, columns);

  @if (index($shorthand, "of") == 2) {
    $context: nth($shorthand, 3);
    $col: nth($shorthand, 1);
  }

  @return $col $context;
}

// gutter() = gutter(12)
@function gutter($count: null) {

    $context: map-get($flegrix-grid-settings, columns);

    @if ($count) {
      $context: $count;
    }

  @return map-get($flegrix-grid-settings, gutter) * map-get($flegrix-grid-settings, columns) / $context;
}


// get the width in %
// span(4) == span(4 of 12)
@function span($shorthand: 1) {

  $parsed: flegrix-parse($shorthand);
  $col: nth($parsed, 1);
  $context: nth($parsed, 2);

  $totalColumnWidth: 100% - (gutter($context) * ($context - 1));
  $width: ($totalColumnWidth / $context * $col) + (gutter($context) * ($col - 1));
  @return $width;
}


@mixin push($shorthand: 1) {
    $parsed: flegrix-parse($shorthand);
    $col: nth($parsed, 1);
    $context: nth($parsed, 2);
    margin-left: span($shorthand) + gutter($context);
}


@mixin col(
  $width,
  $start: 1,
  $push: null,
  $fg: 1,
  $fs: 1
){

  $parsed: flegrix-parse($width);
  $col: nth($parsed, 1);
  $context: nth($parsed, 2);

  @include grid() {
    grid-column-start: $start;
    grid-column-end: $start + $col;
  }

  @include felxbox() {
    flex-grow: $fg;
    flex-shrink: $fs;
    flex-basis: span($width);
    max-width: span($width);
    @if ($push){
      @include push($push of $context);
    }
  }



}


// https://gist.github.com/B-iggy/14da053d2cebf92e1930
// functions to urlencode the svg string
@function flegrix-str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + flegrix-str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  @return $string;
}

@function flegrix-url-encode($string) {
  $map: (
    "%": "%25",
    " ": "%20",
    "!": "%21",
    "'": "%27",
    "(": "%28",
    ")": "%29",
    ",": "%2C",
    "/": "%2F",
    ":": "%3A",
    ";": "%3B",
    "<": "%3C",
    "=": "%3D",
    ">": "%3E",
    "[": "%5B",
    "]": "%5D"
    // "*": "%2A", '"': "%22", "#": "%23", "$": "%24",
    // "&": "%26", "+": "%2B", "?": "%3F", "@": "%40",
  );

  $new: $string;
  @each $search, $replace in $map {
    $new: flegrix-str-replace($new, $search, $replace);
  }
  @return $new;
}

@function flegrix-background-svg($columns) {
  $color: rgba(255,0,0,0.07);
  $lineColor: rgba(128,0,0,0.05);

  $width: span(1 of $columns);
  $gutter: gutter($columns);

  $style: "<#{'style'}><![CDATA["; // fix to have it run in codepen.io
  $style: $style + "line {";
  $style: $style + " stroke: #{$lineColor};";
  $style: $style + " stroke-width: 1;";
  $style: $style + "} ";
  $style: $style + "]]></style>";
  $x: 0%;
  $svg: "";
  @for $i from 1 through $columns {
    // draw column
    @if(map-get($flegrix-grid-settings, debug-container-column-background)){
      $svg: $svg + "<rect x='#{$x}' width='#{$width}' height='100%' />";
    }
    // draw midline of column
    @if(map-get($flegrix-grid-settings, debug-container-column-midline)) {
      $svg: $svg + "<line x1='#{$x + $width/2}' y1='0' x2='#{$x + $width/2}' y2='100%' />";
    }
    // draw midline of gutter if not last column
    @if ($i != $columns) {
      $x: $x + $width;
      @if(map-get($flegrix-grid-settings, debug-container-gutter-midline)) {
        $svg: $svg + "<line x1='#{$x + $gutter/2}' y1='0' x2='#{$x + $gutter/2}' y2='100%' />";
      }
      $x: $x + $gutter;
    }
  }
  $svg: "<svg xmlns='http://www.w3.org/2000/svg' fill='#{$color}'>" + $style + $svg + "</svg>";
  @return $svg;
}
